AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Chatbot

  Chatbot demo app

  '
Globals:
  Function:
    Timeout: 5
Resources:
  ChatbotLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: PutMetric
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: LambdaBasicExecution
      - PolicyDocument:
          Statement:
          - Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: XRayAccess
  ChatbotFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Events:
        HelloWorldApi:
          Type: Api
          Properties:
            Path: /chat
            Method: POST
      Role:
        Fn::GetAtt:
        - ChatbotLambdaRole
        - Arn
      CodeUri: s3://aws-chatbot-demo-code/547d306622356a7b19a3bd27789a6b95
Outputs:
  ChatbotFunction:
    Description: Chatbot Function ARN
    Value:
      Fn::GetAtt:
      - ChatbotFunction
      - Arn
